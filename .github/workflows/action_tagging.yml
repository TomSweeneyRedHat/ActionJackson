name: action_tagging

on:
# Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  
  pull_request:
    branches:
      - main

# Set the permission for this workflow
permissions:
  contents: write

env:
  VERSION_FILE_LOCATION: "VERSION"
  CURRENT_VERSION: "Not Updated"

  
jobs:
  # ------------------------------------------------------------------------------------------------------------------------------------------------
  # Event `pull_request`: Compare the last commit of the main branch or last remote commit of the PR branch -> to the current commit of a PR branch.
  # ------------------------------------------------------------------------------------------------------------------------------------------------
  changed_files:
    runs-on: ubuntu-latest  # windows-latest || macos-latest
    name: Test changed-files
    steps:
      - uses: actions/checkout@v4
      
      - name: Get version
        id: version_value
        run: echo "version=$(cat ${{ env.VERSION_FILE_LOCATION }})" >> $GITHUB_OUTPUT

      # -----------------------------------------------------------------------------------------------------------
      # Get All Changed Files
      # -----------------------------------------------------------------------------------------------------------
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@ed68ef82c095e0d48ec87eccea555d944a631a4c # v46
        # To compare changes between the current commit and the last pushed remote commit set `since_last_remote_commit: true`. e.g
        # with:
        #   since_last_remote_commit: true 

      - name: List all changed files
        env:
          ALL_CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        run: |
          for file in ${ALL_CHANGED_FILES}; do
            echo "$file was changed"
          done
       
      - name: Watch for a version file change from a pull, or a direct push
        id: get_version
        run: |
            echo "Env value= ${{ steps.version_value.outputs.version }}"
            echo "Local: ${{ env.VERSION_FILE_LOCATION }}"
            for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
              echo "Changed file: $file"
              if [[ $file == ${{ env.VERSION_FILE_LOCATION }} ]]; then
                echo "CURRENT_VERSION=${{ steps.version_value.outputs.version }}" >> $GITHUB_ENV
              fi
            done
            echo "Leaving version:  ${{ env.CURRENT_VERSION }}"

      - name: Create the Tag
        run: |
          echo "Version is `${{ env.CURRENT_VERSION }}`, Filename is `${{ env.VERSION_FILE_LOCATION }}` Repository is `${{ github.repository }}`."
          if [[ ${{ env.CURRENT_VERSION }} != "Not Updated" ]]; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git tag -a "v${{ env.CURRENT_VERSION }}" -m "v${{ env.CURRENT_VERSION }}"
            git push origin "v${{ env.CURRENT_VERSION }}"
          fi
