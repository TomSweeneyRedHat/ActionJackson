name: Release
on:
  push:
    tags:
      - '*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version to build and upload (e.g. "v9.8.7")'
        required: true
      buildonly:
        description: 'Build only: Do not create release'
        default: "true"  # 'choice' type requires string value
        type: choice
        options:
          - "true"  # Must be quoted string, boolean value not supported.
          - "false"
      sendmail:
        description: 'Send Mail to podman@lists.podman.io?'
        default: "false"  # 'choice' type requires string value
        type: choice
        options:
          - "true"  # Must be quoted string, boolean value not supported.
          - "false"

# Set the permission for this workflow
permissions:
  contents: write

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
    - name: Determine Version
      id: getversion
      run: |
        if [[ -z "${{ inputs.version }}" ]]
        then
              VERSION=${{ github.ref_name }}
        else
              VERSION=${{ inputs.version }}
        fi
        if ! grep -Eq 'v[0-9]+(\.[0-9]+(\.[0-9]+(-.+)?)?)?$' <<<"$VERSION"
          then
            echo "Unable to parse release version '$VERSION' from github event JSON, or workflow 'version' input."
            exit 1
        fi

        if grep -Eq '.+-dev$' <<<"$VERSION"
        then
          echo "Refusing to process a "-dev" version '$VERSION'"
          exit 1
        fi
        prevrelease=$(curl --retry 3 --silent -m 10 --connect-timeout 5 "https://api.github.com/repos/${{ github.repository }}/releases/latest")
        # PRIORVERSION=$(echo "$prevrelease" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/' | sed -e "s/^v//") >> $GITHUB_OUTPUT       
        PRIORVERSION=$(echo "$prevrelease" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/') >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "priorversion=$PRIORVERSION" >> $GITHUB_OUTPUT
        echo "::notice::Building $VERSION"
        echo "::notice::With Prior Version $PRIORVERSION"

    - name: Determine release
      id: buildonly
      run: |
        # The 'tag' trigger will not have a 'buildonly' input set. Handle
        # this case in a readable/maintainable way.
        if [[ -z "${{ inputs.buildonly }}" ]]
        then
          BUILDONLY=false
        else
          BUILDONLY=${{ inputs.buildonly }}
        fi
        echo "buildonly=$BUILDONLY" >> $GITHUB_OUTPUT
        echo "::notice::This will be build-only: $BUILDONLY"
    outputs:
      version: ${{ steps.getversion.outputs.version }}
      priorversion: ${{ steps.getversion.outputs.priorversion }}
      buildonly: ${{ steps.buildonly.outputs.buildonly }}

# -----------------------------------------------------------------------------------------------------------
# Start the release process
# -----------------------------------------------------------------------------------------------------------
  release:
    name: Create Release
    runs-on: ubuntu-latest
    if: needs.check.outputs.buildonly == 'false'
    needs: [check]
    permissions:
      contents: write
    env:
      VERSION: ${{needs.check.outputs.version}}
      PRIORVERSION: ${{needs.check.outputs.priorversion}}

    steps:
    - name: Checkout the main branch of this repository
      uses: actions/checkout@v5
      with:
        ref: ${{needs.check.outputs.version}}
    - name: TOM Where Are We?
      run: pwd
    - name: TOM List Files in Repository
      run: ls -R ${{ github.workspace }} 
    - name: TOM cat release notes
      run: cat ${{ github.workspace }}/RELEASE_NOTES.md
    - name: TOM, what is that prior version?
      run: echo "Version, Prior Version $VERSION, $PRIORVERSION"
    - name: List local files and directories
      run: |
        echo "Listing contents of the current working directory:"
        ls -la ..
    - name: Checkout Version
      uses: actions/checkout@v5
      with:
        ref: ${{needs.check.outputs.version}}
    - name: Get release notes
      run: |
        ver="$(echo "$VERSION" | sed -e "s/^v//" -e "s/-rc.*//")"
        echo "ver [${ver}]"
        echo "TOM: do the directory thing!"
        ls -R ${{ github.workspace }}
        releasenotes="$VERSION-release-notes.md"
        echo "Release Notes1 [${releasenotes}]"
        awk -v ver=$ver '/^## / { if (p) { exit }; if ($2 == ver) { p=1; next } } p' ${{ github.workspace }}/RELEASE_NOTES.md > $releasenotes
        echo "Release Notes2 [${releasenotes}]"
        if [[ -z $(grep '[^[:space:]]' $releasenotes) ]]; then
          echo "Release Notes3 [${releasenotes}]"
          if [[ $VERSION != *-rc* ]]; then
              echo "Release Notes4 [${releasenotes}]"
              echo "::notice:: Release does not have release notes"
              exit 1
          else
          echo "This is a release candidate of container-libs v$ver. Full release notes will be available with a later RC." > $releasenotes
          fi
        fi
    - name: Display release notes
      run: cat $VERSION-release-notes.md

    # -----------------------------------------------------------------------------------------------------------
    # Create the Changelog
    # -----------------------------------------------------------------------------------------------------------
    - name: Conventional Changelog Action
      id: changelog 
      uses: gableroux/generate-github-release-notes@v0.1.2
      with:
         github_token: ${{ secrets.GITHUB_TOKEN }}
         base_tag: $PRIORVERSION
         head_tag: "${{ github.ref }}"
         repository: ${{ github.repository }}
         auto_detect_new_contributors: 'true'

    # -----------------------------------------------------------------------------------------------------------
    # Create the Release
    # -----------------------------------------------------------------------------------------------------------
    - name: Create release
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        title=$VERSION
        if [[ $VERSION == *-rc* ]]; then
          RC="--prerelease"
          title="${title/rc/"RC"}"
        else
          # check if this version should not be marked latest
          vers=${VERSION#"v"}
          priorversion=${PRIORVERSION#"v"}
          echo "Prior version,Current version: ${priorversion},${vers}"
          # sort -V -C returns 0 if args are ascending version order
          if !(echo "${priorvers},${vers}" | tr ',' '\n' | sort -V -C)
          then
            LATEST="--latest=false"
          fi
        fi

        echo "TOM: prior,ver: ${priorversion},${vers}"
        echo "TOM: title: $title"
        echo "TOM: notes file $VERSION-release-notes.md"
        echo "TOM: RC: $RC"
        echo "TOM: LATEST: $LATEST"
        echo "TOM: New releasenotes: ${{ steps.changelog.outputs.notes }}"

        gh release create $VERSION \
            -t $title \
            --notes-file $VERSION-release-notes.md \
            --verify-tag \
            $RC \
            $LATEST
            
# -----------------------------------------------------------------------------------------------------------
# If requested, let's send an email notification.
# -----------------------------------------------------------------------------------------------------------
  notification:
    name: Email notification
    runs-on: ubuntu-latest
    needs: [check, release]
    if: needs.check.outputs.buildonly == 'false' && inputs.sendmail == 'true'
    steps:
      - name: Format release email
        id: format
        env:
          VERSION: ${{ needs.check.outputs.version }}
        run: |
          if grep -Eq '.+-rc' <<<"$VERSION"
          then
            RC_PREFIX="candidate "
          fi

          echo "mail_subj=container-libs ${RC_PREFIX}${VERSION} Released" >> $GITHUB_OUTPUT

          cat <<EOF>email_body.txt
          Hi all,

          Containers-lib ${RC_PREFIX}${VERSION} is now available.  You may view the full details at
          https://github.com/${{ github.repository }}/releases/tag/$VERSION

          Release ${RC_PREFIX}Notes:
          --------------
          EOF

          echo ${{ secrets.GITHUB_TOKEN }} | gh auth login --with-token
          gh release view $VERSION \
            --repo ${{ github.repository }} --json=body --jq '.body' >> email_body.txt

      # If job fails, permit operator to observe contents in case helpful.
      - name: Provide release e-mail contents for examination
        run: cat email_body.txt
      - name: Send release notification e-mail
        # Ref: https://github.com/dawidd6/action-send-mail
        uses: dawidd6/action-send-mail@v3.12.0
        with:
          server_address: ${{secrets.ACTION_MAIL_SERVER}}
          server_port: 465
          username: ${{secrets.ACTION_MAIL_USERNAME}}
          password: ${{secrets.ACTION_MAIL_PASSWORD}}
          subject: ${{ steps.format.outputs.mail_subj }}
          to: Podman List <podman@lists.podman.io>
          from: ${{secrets.ACTION_MAIL_SENDER}}
          body: file://./email_body.txt
