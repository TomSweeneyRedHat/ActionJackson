name: Auto Tag and Release on Version Bump

# Controls when the workflow will run
on:
# Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  # Triggers the workflow on push request events, but only for the "main" branch
  pull_request:
    types: [merged]
    branches: [ "main" ]
  push:
    branches: [ "main" ]

# Set the permission for this workflow
permissions:
  contents: write

env:
  ALL_CHANGED_FILES: ""
  CURRENT_VERSION: "Not Updated"
  VERSION_FILE_LOCATION: "VERSION"

  
jobs:
  # ------------------------------------------------------------------------------------------------------------------------------------------------
  # Event `pull_request`: Compare the last commit of the main branch or last remote commit of the PR branch -> to the current commit of a PR branch.
  # ------------------------------------------------------------------------------------------------------------------------------------------------
  changed_files:
    runs-on: ubuntu-latest  # windows-latest || macos-latest
    name: Test changed-files
    steps:
      - uses: actions/checkout@v4
      
      - name: Get version
        id: version_value
        run: echo "version=$(cat ${{ env.VERSION_FILE_LOCATION }})" >> $GITHUB_OUTPUT

      # -----------------------------------------------------------------------------------------------------------
      # Get All Changed Files
      # -----------------------------------------------------------------------------------------------------------
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@ed68ef82c095e0d48ec87eccea555d944a631a4c # v46
        # To compare changes between the current commit and the last pushed remote commit set `since_last_remote_commit: true`. e.g
        # with:
        #   since_last_remote_commit: true 

      # -----------------------------------------------------------------------------------------------------------
      # List All Changed Files
      # -----------------------------------------------------------------------------------------------------------
      - name: List all changed files
        run: |
          echo "ALL_CHANGED_FILES=${{ steps.changed-files.outputs.all_changed_files }}" >> $GITHUB_ENV
          for file in ${{env.ALL_CHANGED_FILES}}; do
            echo "$file was changed"
          done
      # -----------------------------------------------------------------------------------------------------------
      # Watch for a change in the version file in the repository
      # -----------------------------------------------------------------------------------------------------------       
      - name: Watch for a version file change from a pull, or a direct push
        id: get_version
        run: |
            echo "Version value= ${{ steps.version_value.outputs.version }}"
            echo "Local: ${{ env.VERSION_FILE_LOCATION }}"
            for file in ${{env.ALL_CHANGED_FILES}}; do
              echo "Changed file: $file"
              if [[ $file == ${{ env.VERSION_FILE_LOCATION }} ]]; then
                echo "CURRENT_VERSION=${{ steps.version_value.outputs.version }}" >> $GITHUB_ENV
              fi
            done
            echo "Leaving version:  ${{ env.CURRENT_VERSION }}"

      # -----------------------------------------------------------------------------------------------------------
      # Create the Tag if needed
      # -----------------------------------------------------------------------------------------------------------
      - name: Create the Tag
        if: env.CURRENT_VERSION != 'Not Updated'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "v${{ env.CURRENT_VERSION }}" -m "v${{ env.CURRENT_VERSION }}"
          git push origin "v${{ env.CURRENT_VERSION }}"
          
      # -----------------------------------------------------------------------------------------------------------
      # Create the Changelog
      # -----------------------------------------------------------------------------------------------------------
      #- name: Conventional Changelog Action
      #  id: changelog 
      #  uses: TriPSs/conventional-changelog-action@v3 
      #  if: env.CURRENT_VERSION != 'Not Updated'
      #  with: 
      #     github-token: ${{ secrets.github_token }}
      #     version-file: "${{ env.VERSION_FILE_LOCATION }}"
      #     output-file: "false" 

      - name: Conventional Changelog Action
        id: changelog 
        uses: janheinrichmerker/action-github-changelog-generator@v2.3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          onlyLastTag: true
  
      # -----------------------------------------------------------------------------------------------------------
      # Create the Release if needed
      # -----------------------------------------------------------------------------------------------------------
      - name: Create the Release
        uses: actions/create-release@v1
        if: env.CURRENT_VERSION != 'Not Updated'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # HOLD
      #    run: |
      #      gh release create 'v${{ env.CURRENT_VERSION }}' \
      #        --repo="$GITHUB_REPOSITORY" \
      #        --title="v${{ env.CURRENT_VERSION }}" \
      #        --generate-notes
        with:
          tag_name: v${{ env.CURRENT_VERSION }}
          release_name: v${{ env.CURRENT_VERSION }}
          body: ${{ steps.changelog.outputs.changelog }}
      #      'Changelog for v${{ env.CURRENT_VERSION }}'

          draft: false
          prerelease: false
