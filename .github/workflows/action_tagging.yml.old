name: Auto Tag and Release on Version Bump

# Controls when the workflow will run
on:
# Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  # Triggers the workflow on push request events, but only for the "main" branch
  pull_request:
    types: [merged]
    branches: [ "main" ]
  push:
    branches: [ "main" ]

# Set the permission for this workflow
permissions:
  contents: write

env:
  ALL_CHANGED_FILES: ""
  CURRENT_VERSION: "Not Updated"
  VERSION_FILE_LOCATION: "VERSION"

  
jobs:
  # ------------------------------------------------------------------------------------------------------------------------------------------------
  # Event `pull_request`: Compare the last commit of the main branch or last remote commit of the PR branch -> to the current commit of a PR branch.
  # ------------------------------------------------------------------------------------------------------------------------------------------------
  changed_files:
    runs-on: ubuntu-latest  # windows-latest || macos-latest
    name: Test changed-files
    steps:
      - uses: actions/checkout@v4
      
      - name: Get version
        id: version_value
        run: echo "version=$(cat ${{ env.VERSION_FILE_LOCATION }})" >> $GITHUB_OUTPUT

      # -----------------------------------------------------------------------------------------------------------
      # Get All Changed Files
      # -----------------------------------------------------------------------------------------------------------
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@ed68ef82c095e0d48ec87eccea555d944a631a4c # v46
        # To compare changes between the current commit and the last pushed remote commit set `since_last_remote_commit: true`. e.g
        # with:
        #   since_last_remote_commit: true 

      # -----------------------------------------------------------------------------------------------------------
      # List All Changed Files
      # -----------------------------------------------------------------------------------------------------------
      - name: List all changed files
        run: |
          echo "ALL_CHANGED_FILES=${{ steps.changed-files.outputs.all_changed_files }}" >> $GITHUB_ENV
          for file in ${{env.ALL_CHANGED_FILES}}; do
            echo "$file was changed"
          done

      # -----------------------------------------------------------------------------------------------------------
      # Watch for a change in the version file in the repository.  Change CURRENT_VERSION to the value within
      # if it has changed
      # -----------------------------------------------------------------------------------------------------------       
      - name: Watch for a version file change from a pull, or a direct push
        id: get_version
        run: |
            echo "Version value= ${{ steps.version_value.outputs.version }}"
            echo "Local: ${{ env.VERSION_FILE_LOCATION }}"
            for file in ${{env.ALL_CHANGED_FILES}}; do
              echo "Changed file: $file"
              if [[ $file == ${{ env.VERSION_FILE_LOCATION }} ]]; then
                echo "CURRENT_VERSION=${{ steps.version_value.outputs.version }}" >> $GITHUB_ENV
              fi
            done
            echo "Leaving get_version:  ${{ env.CURRENT_VERSION }}"

      # -----------------------------------------------------------------------------------------------------------
      # Find the current Release if the version has changed.
      # -----------------------------------------------------------------------------------------------------------
      - name: Get Latest Release
        id: currentrelease
        uses: joutvhu/get-release@v1
        if: env.CURRENT_VERSION != 'Not Updated'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          latest: true
          # Tag name starts with `v`
          pattern: '^v.*'
          # Including pre-release
          prerelease: true

      # -----------------------------------------------------------------------------------------------------------
      # Create the Tag if the version has changed.
      # -----------------------------------------------------------------------------------------------------------
      - name: Create the Tag
        if: env.CURRENT_VERSION != 'Not Updated'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "v${{ env.CURRENT_VERSION }}" -m "v${{ env.CURRENT_VERSION }}"
          git push origin "v${{ env.CURRENT_VERSION }}"
          
      # -----------------------------------------------------------------------------------------------------------
      # Create the Changelog if the version has changed.
      # -----------------------------------------------------------------------------------------------------------
      - name: Conventional Changelog Action
        id: changelog 
        uses: gableroux/generate-github-release-notes@v0.1.2
        if: env.CURRENT_VERSION != 'Not Updated'
        with:
           github_token: ${{ secrets.GITHUB_TOKEN }}
           base_tag: ${{ steps.currentrelease.outputs.tag_name }}
           head_tag: "v${{ env.CURRENT_VERSION }}"
           repository: ${{ github.repository }}
           auto_detect_new_contributors: 'true'
  
      # -----------------------------------------------------------------------------------------------------------
      # Create the Release if the version has changed.
      # -----------------------------------------------------------------------------------------------------------
      - name: Create the Release
        uses: actions/create-release@v1
        if: env.CURRENT_VERSION != 'Not Updated'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.CURRENT_VERSION }}
          release_name: v${{ env.CURRENT_VERSION }}
          body: ${{ steps.changelog.outputs.notes }}
          draft: false
          prerelease: false
