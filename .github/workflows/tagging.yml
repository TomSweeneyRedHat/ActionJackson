# This is a workflow to watch for a merged PR with a specific
# Tag used to denote a version bump to a new `Y` version.  Once found,
# it will create a Tag and then a Release based on that tag.name: Automatic Tagging

name: Auto Tag on Version Bump
 
# Controls when the workflow will run
on:
# Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  # Triggers the workflow on push request events, but only for the "main" branch
  pull_request:
    types: [merged]
    branches: [ "main" ]

# Set the permission for this workflow
permissions:
  contents: write

env:
  VERSION_FILE_LOCATION: "VERSION"

# A workflow run to find and do the tagging.
jobs:
  create-tag: 
    runs-on: ubuntu-latest
    steps: 
      - uses: actions/checkout@v3
      - name: Get version
        id: version_value
        run: echo "version=$(cat ${{ env.VERSION_FILE_LOCATION }})" >> $GITHUB_OUTPUT
        
      - name: Watch for version file change from a pull, or a direct push
        id: get_version
        run: |
            if [[ ${{ github.event_name }} == 'pull_request' ]]; then
              changed_files=$(git diff --name-only -r HEAD^1 HEAD)
            else
              changed_files=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }})
            fi
            for file in $changed_files; do
              if [[ $file == env.VERSION_FILE_LOCATION ]]; then
                current_version= `cat ${ env.VERSION_FILE_LOCATION }` >> $GITHUB_OUTPUT
              fi
            done
            echo "File location ${{ env.VERSION_FILE_LOCATION }} BigValue: $current_version NewVal ${{ steps.version_value.outputs.current_version }}"
    
      - name: Create the Tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          echo "Version is ${{ steps.get_version.outputs.current_version }} Filename is ${{ env.VERSION_FILE_LOCATION }} repository is ${{ github.repository }}."
          git tag -a "v${{ steps.get_version.outputs.current_version }}" -m "v${{ steps.get_version.outputs.current_version }}"
          git push origin "v${{ steps.get_version.outputs.current_version }}"
